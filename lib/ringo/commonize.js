var Parser = require('ringo/args').Parser();
var system = require('system');
var fs = require('file');
var resolveId = require('ringo/fileutils').resolveId;
require('core/string');

exports.main = function() {
    if (system.args.length < 2) {
        print('Please provide a resource or directory to commonize');
        return;
    }

    for each (var path in system.args.slice(1)) {
        if (fs.isFile(path)) {
            convertResource(new org.ringojs.repository.FileResource(path));
        } else if (fs.isDirectory(path)) {
            convertRepository(new org.ringojs.repository.FileRepository(path));
        } else {
            print('File or directory not found:', path);
        }
    }
}

function convertRepository(repo) {
    var scripts = repo.getResources(true).filter(function(res) {
        return res.name.endsWith('.js');
    });
    for each (var script in scripts) {
        convertResource(script);
    }
}

function convertResource(res) {
    // set to absolute module paths so relative includes can be resolved
    res.setAbsolute(true);
    var content = res.content;
    var includePattern = new RegExp('include\\s*\\(([\\s\\w/\\.\"\']+)\\);?', 'g');
    content = content.replace(includePattern, function(str, param) {
        try {
            var id = param.replace(/['"]/g, '').trim();
            id = resolveId(res.moduleName, id);
            var mod = require(id);
            var props = Object.keys(mod);
            // filter out included properties not found in the module
            props = props.filter(function(p) {
                return content.contains(p);
            });
            if (props.length == 0) {
                return '';
            } else if (props.length == 1) {
                return 'var ' + props[0] + ' = require(' + param + ').' + props[0] + ';';
            } else {
                return 'var {' + props.join(', ') + '} = require(' + param + ');';
            }
        } catch (error) {
            print('error resolving include: ' + error);
            return str;
        }
    });
    var exportPattern = new RegExp('export\\s*\\(([\\s\\w,\"\']+)\\);?', 'g');
    var match = exportPattern.exec(content);
    var exported = '';
    content = content.replace(exportPattern, function(str, params) {
        exported += params + ',';
        return '';
    });
    if (exported) {
        content += '\n\n// Generated by commonize\n';
        var json = JSON.parse('[' + exported.replace(/'/g, '"') + ']');
        for each (var e in json) {
            content += 'exports.' + e + ' = ' + e + ';\n';
        }
    }
    if (res.content != content) {
        print('Converting', res.path);
        fs.write(res.path, content);
    }
}
